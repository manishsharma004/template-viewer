{"version":3,"file":"static/js/725.bd899181.chunk.js","mappings":"+IA0DA,MAEA,EAFmB,IA1DnB,MAAiBA,WAAAA,GAAA,KACbC,eAAiB,UAAU,KAE3BC,aAAe,EAAE,KACjBC,eAAiB,EAAE,KACnBC,cAAgB,EAChB,KACAC,cAAgB,CAAE,CAWlBC,SAAAA,GACE,MAAO,OACT,CASAC,SAAAA,GACE,OAAOC,KAAKP,cACd,CAaAQ,MAAAA,CAAOA,EAAcC,EAAcC,GACjC,MAAMC,EAAMC,OAAOH,GACbI,EAAMN,KAAKO,gBAAgBN,EAAQE,GACzC,OAAY,OAARC,QAAwBI,IAARJ,GAAqBK,MAAML,GACtCF,EAEFI,EAAIL,OAAOG,EACpB,CAGQG,eAAAA,CAAgBN,EAAcE,GACpC,OAAO,IAAIO,KAAKC,aAAaR,EAAQ,CAAES,MAAOX,GAChD,E","sources":["utils/NumberTool.ts"],"sourcesContent":["class NumberTool {\n    DEFAULT_FORMAT = \"default\";\n  \n    STYLE_NUMBER = 1;\n    STYLE_CURRENCY = 2;\n    STYLE_PERCENT = 3;\n    // NOTE: 3 belongs to a non-public \"scientific\" style...\n    STYLE_INTEGER = 4;\n  \n    // default: parameter access\n    /**\n     * This implementation returns the default locale. Subclasses\n     * may override this method to provide a different locale. Doing so\n     * will affect all formatting methods where no locale is specified\n     * in the parameters.\n     *\n     * @return the default {@link Locale}\n     */\n    getLocale(): string {\n      return \"en-US\";\n    }\n  \n    /**\n     * Return the pattern or style to be used for formatting numbers when none\n     * is specified in the parameters. Subclasses may override this to provide\n     * a different default format.\n     *\n     * @return the default format\n     */\n    getFormat(): string {\n      return this.DEFAULT_FORMAT;\n    }\n  \n    /**\n     * Converts the specified object to a number and returns\n     * a formatted string representing that number in the specified\n     * {@link Locale}.\n     *\n     * @param format the custom or standard pattern to be used\n     * @param number the input object to be converted\n     * @param locale the {@link Locale} to be used for formatting\n     * @return a formatted string representing the specified number or\n     * the input object/code if the parameters are invalid\n     */\n    format(format?: any, number?: any, locale?: string): string {\n      const num = Number(number);\n      const fmt = this.getNumberFormat(format, locale);\n      if (num === null || num === undefined || isNaN(num)) {\n        return number;\n      }\n      return fmt.format(num);\n    }\n\n    //\n    private getNumberFormat(format?: any, locale?: string): Intl.NumberFormat {\n      return new Intl.NumberFormat(locale, { style: format });\n    }\n  }\nconst numberTool = new NumberTool();\n\nexport default numberTool;\n  "],"names":["constructor","DEFAULT_FORMAT","STYLE_NUMBER","STYLE_CURRENCY","STYLE_PERCENT","STYLE_INTEGER","getLocale","getFormat","this","format","number","locale","num","Number","fmt","getNumberFormat","undefined","isNaN","Intl","NumberFormat","style"],"sourceRoot":""}